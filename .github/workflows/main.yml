name: 定时运行程序并发布 Release

on:
  schedule:
    - cron: '0 */1 * * *'
  workflow_dispatch:

permissions:
  contents: write
  
jobs:
  run-and-release:
    runs-on: windows-latest
    strategy:
      matrix:
        # 给每个程序添加一个唯一索引（0, 1, ...），用于判断是否为最后一项
        include:
          - program: "NotepadPlusPlusReleaseDownloader"
            index: 0
          - program: "NuGetPackageExplorerDownloader"
            index: 1
        # 总数量（需与上面的项数一致，这里是2个程序）
        total: [2]
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 运行 ${{ matrix.program }} 下载程序
        run: .\${{ matrix.program }}.exe
        shell: pwsh

      - name: 读取 ${{ matrix.program }} 的标签和标题
        id: read_info
        run: |
          $tag = (Get-Content tag.txt -Raw).Trim()
          $title = (Get-Content title.txt -Raw).Trim()
          
          if ([string]::IsNullOrWhiteSpace($tag)) {
            Write-Error "${{ matrix.program }} 的 tag.txt 内容为空"
            exit 1
          }
          if ([string]::IsNullOrWhiteSpace($title)) {
            Write-Error "${{ matrix.program }} 的 title.txt 内容为空"
            exit 1
          }
          
          echo "tag=$tag" >> $env:GITHUB_OUTPUT
          echo "title=$title" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: 检查 ${{ matrix.program }} 标签是否存在
        id: check_tag
        run: |
          $tags = gh api repos/${{ github.repository }}/releases | jq -r '.[].tag_name'
          $currentTag = "${{ steps.read_info.outputs.tag }}"
          
          if ($tags -match "^$currentTag$") {
            echo "tag_exists=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "tag_exists=false" >> $env:GITHUB_OUTPUT
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh

      - name: 发布 ${{ matrix.program }} 到 Release
        if: steps.check_tag.outputs.tag_exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.read_info.outputs.tag }}
          name: ${{ steps.read_info.outputs.title }}
          files: ./downloading/*
          body: |
            自动发布于 ${{ github.event.head_commit.timestamp }}
            程序名称：${{ matrix.program }}
            运行编号：${{ github.run_number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 修复：通过索引判断是否为最后一个程序（不清理最后一个程序的文件夹）
      - name: 清理下载文件夹
        # 总数量-1 等于最后一个索引（例如总数量2，最后一个索引是1）
        if: ${{ matrix.index != (matrix.total - 1) }}
        run: |
          if (Test-Path ./downloading) {
            Remove-Item ./downloading/* -Recurse -Force
            Write-Host "已清理 downloading 文件夹，准备处理下一个程序"
          }
        shell: pwsh
