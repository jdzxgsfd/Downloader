name: 定时运行程序并发布 Release

on:
  push:
  schedule:
    - cron: '0 */1 * * *'  # 每小时运行一次
  workflow_dispatch:      # 允许手动触发

permissions:
  contents: write
  
jobs:
  run-and-release:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          # 程序1：NotepadPlusPlusReleaseDownloader
          - program_base: "NotepadPlusPlusReleaseDownloader"
            index: 0
            last_index: 20  # 总程序数-1（当前3个程序，最后索引为2）
          # 程序2：NuGetPackageExplorerDownloader
          - program_base: "NuGetPackageExplorerDownloader"
            index: 1
            last_index: 20
          # 程序3：voidImageViewerDownloader
          - program_base: "voidImageViewerDownloader"
            index: 2
            last_index: 20
          # 程序4：CefFlashBrowserDownloader
          - program_base: "CefFlashBrowserDownloader"
            index: 3
            last_index: 20
          # 程序5：chrome_installerDownloader
          - program_base: "chrome_installerDownloader"
            index: 4
            last_index: 20
          # 程序6：edge_installerDownloader
          - program_base: "edge_installerDownloader"
            index: 5
            last_index: 20
          # 程序7：SevenZipDownloader
          - program_base: "SevenZipDownloader"
            index: 6
            last_index: 20
          # 程序8：upxDownloader
          - program_base: "upxDownloader"
            index: 7
            last_index: 20
          # 程序9：ApkInfoDownloader
          - program_base: "ApkInfoDownloader"
            index: 8
            last_index: 20
          # 程序10：VCPP20152022
          - program_base: "VCPP20152022"
            index: 9
            last_index: 20
          # 程序11：VS2017Current
          - program_base: "VS2017Current"
            index: 10
            last_index: 20
          # 程序12：VS2019Current
          - program_base: "VS2019Current"
            index: 11
            last_index: 20
          # 程序13：VS2022Current
          - program_base: "VS2022Current"
            index: 12
            last_index: 20
          # 程序14：PostmanDownloader
          - program_base: "PostmanDownloader"
            index: 13
            last_index: 20
          # 程序15：sordum
          - program_base: "sordum"
            index: 14
            last_index: 20
          # 程序16：Potplayer
          - program_base: "Potplayer"
            index: 15
            last_index: 20
          # 程序17：OpenCodecSetup
          - program_base: "OpenCodecSetup"
            index: 16
            last_index: 20
          # 程序18：WebView2RuntimeDownloader
          - program_base: "WebView2RuntimeDownloader"
            index: 17
            last_index: 20
          # 程序19：GifCamDownloader
          - program_base: "GifCamDownloader"
            index: 18
            last_index: 20
          # 程序20：FlashBrowserDownloader
          - program_base: "FlashBrowserDownloader"
            index: 19
            last_index: 20
          # 程序21：PaintNetDownloader
          - program_base: "PaintNetDownloader"
            index: 20
            last_index: 20
            
            
            
            
    steps:
      # 步骤1：拉取仓库代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 步骤2：运行当前程序（带.exe后缀）
      - name: 运行 ${{ matrix.program_base }}.exe
        run: |
          # 强制使用绝对路径（避免相对路径解析问题）
          $repoRoot = $env:GITHUB_WORKSPACE  # GitHub 工作流的仓库根目录绝对路径
          $exePath = Join-Path $repoRoot "${{ matrix.program_base }}.exe"
          
          # 再次确认文件存在（带绝对路径检查）
          if (-not (Test-Path $exePath -PathType Leaf)) {
            Write-Error "绝对路径下未找到文件：$exePath`n请确认文件已上传到仓库根目录"
            exit 1
          }
          
          # 检查文件权限（是否可执行）
          $filePerms = (Get-Item $exePath).Attributes
          Write-Host "文件权限：$filePerms"  # 调试输出权限信息
          if ($filePerms -match "ReadOnly") {
            Write-Warning "文件为只读，尝试移除只读属性"
            Set-ItemProperty -Path $exePath -Name IsReadOnly -Value $false
          }
          
          # 强制以可执行方式运行（使用 & 并指定完整路径）
          Write-Host "尝试运行：$exePath"
          & $exePath
          
          # 检查程序是否成功执行
          if ($LASTEXITCODE -ne 0) {
            Write-Error "$exePath 执行失败，退出码：$LASTEXITCODE"
            exit $LASTEXITCODE
          }
        shell: pwsh
        env:
          # 临时放宽 PowerShell 执行策略（仅当前步骤有效）
          PSExecutionPolicyPreference: Bypass

      # 步骤3：读取程序专属的标签和标题文件
      - name: 读取 ${{ matrix.program_base }} 的标签和标题
        id: read_info
        run: |
          $programBase = "${{ matrix.program_base }}"
          # 定义专属文件名（程序名.tag.txt 和 程序名.title.txt）
          $tagFile = "$programBase.tag.txt"
          $titleFile = "$programBase.title.txt"
          
          # 1. 检查文件是否存在
          if (-not (Test-Path $tagFile -PathType Leaf)) {
            Write-Error "标签文件 $tagFile 不存在，请检查程序是否正常生成"
            exit 1
          }
          if (-not (Test-Path $titleFile -PathType Leaf)) {
            Write-Error "标题文件 $titleFile 不存在，请检查程序是否正常生成"
            exit 1
          }
          
          # 2. 安全读取文件内容（避免空值错误）
          $tagContent = (Get-Content $tagFile -Raw).Trim()
          $titleContent = (Get-Content $titleFile -Raw).Trim()
          
          # 3. 验证内容不为空
          if ([string]::IsNullOrWhiteSpace($tagContent)) {
            Write-Error "$tagFile 内容为空，请检查程序输出"
            exit 1
          }
          if ([string]::IsNullOrWhiteSpace($titleContent)) {
            Write-Error "$titleFile 内容为空，请检查程序输出"
            exit 1
          }
          
          # 4. 输出到环境变量供后续步骤使用
          echo "tag=$tagContent" >> $env:GITHUB_OUTPUT
          echo "title=$titleContent" >> $env:GITHUB_OUTPUT
        shell: pwsh

      # 步骤4：检查当前标签是否已存在于Releases
      - name: 检查 Release 标题最后一段字符串是否存在
        id: check_tag  # 保持id不变，便于后续引用
        run: |
          # 获取目标标题（假设来自 read_info 步骤的 outputs.title）
          $currentTag = "${{ steps.read_info.outputs.title }}"  # 保持变量名$currentTag不变
          Write-Host "原始目标标题: $currentTag"
          
          # 提取标题中最后一个空格后的字符串（核心修改）
          $lastSpaceIndex = $currentTag.LastIndexOf(' ')
          if ($lastSpaceIndex -ge 0 -and $lastSpaceIndex -lt $currentTag.Length - 1) {
            $targetLastPart = $currentTag.Substring($lastSpaceIndex + 1)
          } else {
            $targetLastPart = $currentTag  # 无空格时用完整标题
          }
          Write-Host "需检查的最后一段字符串: $targetLastPart"
          
          # 获取所有现有Release的标题
          $allReleaseTitles = gh api repos/${{ github.repository }}/releases --jq '.[].name'
          if (-not $allReleaseTitles) {
            Write-Host "仓库暂无任何Releases"
            echo "tag_exists=false" >> $env:GITHUB_OUTPUT  # 保持输出变量名
            exit 0
          }
          
          # 检查现有标题的最后一段是否匹配
          $exists = $false
          foreach ($title in $allReleaseTitles) {
            $titleLastSpaceIndex = $title.LastIndexOf(' ')
            $titleLastPart = if ($titleLastSpaceIndex -ge 0 -and $titleLastSpaceIndex -lt $title.Length - 1) {
              $title.Substring($titleLastSpaceIndex + 1)
            } else {
              $title
            }
            
            if ($titleLastPart -eq $targetLastPart) {
              Write-Host "发现匹配的现有标题: $title（最后一段: $titleLastPart）"
              $exists = $true
              break
            }
          }
          
          # 输出结果（保持变量名tag_exists）
          if ($exists) {
            echo "tag_exists=true" >> $env:GITHUB_OUTPUT
            Write-Host "最后一段字符串 '$targetLastPart' 已存在"
          } else {
            echo "tag_exists=false" >> $env:GITHUB_OUTPUT
            Write-Host "最后一段字符串 '$targetLastPart' 不存在"
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh

      # 步骤5：发布Release（仅当标签不存在时）
      - name: 发布 ${{ matrix.program_base }} 到 Release
        if: steps.check_tag.outputs.tag_exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.read_info.outputs.tag }}
          name: ${{ steps.read_info.outputs.title }}
          files: ./downloading/*  # 上传下载的文件（若需隔离可改为 ./downloading_${{ matrix.program_base }}/*）
          body: |
            自动发布于 ${{ github.event.head_commit.timestamp }}
            程序名称：${{ matrix.program_base }}
            运行编号：${{ github.run_number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 步骤6：清理下载目录（非最后一个程序时执行）
      - name: 清理下载文件夹
        if: ${{ matrix.index != matrix.last_index }}
        run: |
          if (Test-Path ./downloading) {
            Remove-Item ./downloading/* -Recurse -Force
            Write-Host "已清理 downloading 文件夹，准备处理下一个程序"
          }
        shell: pwsh
